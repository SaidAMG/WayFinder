@model IEnumerable<Location>
@{
    ViewBag.Title = "Locations";
    ViewData["LocationsActive"] = "active";
}

<h2>Locations</h2>

<div id="modalPlaceholder"></div>

<div class="card card-body border-0 shadow table-responsive">
    <table class="table text-center">
        <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.ID)</th>
            <th>@Html.DisplayNameFor(model => model.Name)</th>
            <th>@Html.DisplayNameFor(model => model.Level)</th>
            <th>Actions</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(itemModel => item.ID)</td>
                <td>@Html.DisplayFor(itemModel => item.Name)</td>
                <td>@Html.DisplayFor(itemModel => item.Level.LevelNumber)</td>
                <td>
                    <button type="button" style="background: transparent; border: none;" onclick="viewLocation('@item.ID')">
                        <i class="material-icons text-info">info</i>
                    </button>
                    <button type="button" style="background: transparent; border: none;" onclick="editLocation('@item.ID')">
                        <i class="material-icons text-warning">edit</i>
                    </button>
                    <button type="button" style="background: transparent; border: none;" onclick="deleteLocation('@item.ID', '@item.Name')">
                        <i class="material-icons text-danger">delete</i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="mt-2">
    <button class="btn btn-primary" onclick="createLocation()"><i style="vertical-align: -6px;" class="material-icons">add</i> Create Location</button>
</div>

@section Scripts {
    <script type="text/javascript">
     
         const swalWithBootstrapButtons = Swal.mixin({
             customClass: {
                 confirmButton: 'btn btn-success',
                 cancelButton: 'btn btn-danger'
             },
             buttonsStyling: false
         });
         
         function viewLocation(locationId) {
             $.ajax({
                 url: '@Url.Action("Details", "Locations")/' + locationId,
                 type: 'POST',
                 success: function (response) {
                     $('#modalPlaceholder').html(response);
                     $('#viewLocationModal').modal('show');
                 }
             });
         }
         
         function editLocation(locationId) {
             $.ajax({
                 url: '@Url.Action("Edit", "Locations")/' + locationId,
                 type: 'POST',
                 success: function (response) {
                     $('#modalPlaceholder').html(response);
                     $('#editLocationModal').modal('show');
                 }
             });
         }
         
         function createLocation() {
             $.ajax({
                 url: '@Url.Action("Create", "Locations")',
                 success: function (response) {
                     $('#modalPlaceholder').html(response);
                     $('#createLocationModal').modal('show');
                 }
             });
         }
         
         function deleteLocation(locationId, name) {
             const location = window.location;
     
             swalWithBootstrapButtons.fire({
                 icon: 'warning',
                 text: 'Are you sure you want to delete location ' + name + '?',
                 showCancelButton: true,
                 confirmButtonText: 'Yes, delete it!',
                 cancelButtonText: 'No, cancel!',
                 reverseButtons: true,
             }).then((result) => {
                 if (result.isConfirmed) {
                     // Send post request to backend to actually delete the user.
                     $.post('@Url.Action("Delete", "Locations")', { id: locationId }, function() {
                         swalWithBootstrapButtons.fire(
                                           'Deleted!',
                                           'Location ' + name + ' has been deleted.',
                                           'success'
                                       ).then(_ => location.reload());
                     });
                 }
             });
         }
     </script>
}